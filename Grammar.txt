# Goal of types:
# 1. Predict the resultant type of an expression (using its input types) (e.g. to find the type of a in a = b + c)
# 2. Check whether a type can be incorporated into another type (e.g. to check whether f(a) is valid)


Start -> ( TypeDeclaration | TypeTest | TypeFit | '\n' ) * ;

TypeDeclaration -> 'type' IDENTIFIER '\n' ;

IDENTIFIER -> ( [A-Z] | [a-z] | _ | [0-9] )* ;

TypeTest -> 'test' type '\n' ;

TypeFit -> 'fit' type 'in' type '\n' ; 

Type -> CombinationType ;

CombinationType -> RefinedType ( '|' RefinedType )*
				 | RefinedType ( '&' RefinedType )* ;

RefinedType -> BaseType ( '[' RefinementExpression ']' ) * ;

BaseType -> Name | '(' Type ')' ;

RefinementExpression -> LogicalRefinementExpression ;
LogicalRefinementExpression -> LogicalUnary ( 'and' LogicalUnary ) *
                             | LogicalUnary ( 'or' LogicalUnary ) *
                             | LogicalUnary ( 'xor' LogicalUnary ) * ;
LogicalUnary -> LogicalNot | Comparison ;
LogicalNot -> 'not' LogicalNot | Prefix ;

Comparison -> ('=' | '!=' | '>' | '<=' | '>' | '>=')? Numeric | ':' Type ;

Numeric -> Term ;

Term -> Factor ( ( '+' | '-' ) Factor )* ;

Factor -> Prefix ;

Prefix -> ( '+' | '-' ) Prefix | Primary ;

Primary -> IDENTIFIER | Literal | '(' RefinementExpression ')' ;

Literal -> 'true' | 'false' | CHAR_LITERAL | NUMBER_LITERAL ;
